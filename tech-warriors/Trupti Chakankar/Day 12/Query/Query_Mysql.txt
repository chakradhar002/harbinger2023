1a. Display the first and last names of all actors from the table actor.

1a.Query -
SELECT first_name,
       last_name
FROM   actor;

-----------------------------------------------------------------------------------------------------------------------------------------------------------

1b. Display the first and last name of each actor in a single column in upper case letters. Name the column Actor Name.

1d.Query - 
SELECT Upper(Concat(first_name, "", last_name))AS actor_name
FROM   actor; 
-----------------------------------------------------------------------------------------------------------------------------------------------------------

2a. You need to find the ID number, first name, and last name of an actor, of whom you know only the first name, "Joe." What is one query would you use to obtain this information?

2a.Query - 
SELECT actor_id,
       first_name,
       last_name
FROM   actor
WHERE  first_name LIKE "joe"; 
------------------------------------------------------------------------------------------------------------------------------------------------------------

2b. Find all actors whose last name contain the letters GEN:

2b.Query - 
SELECT *
FROM   actor
WHERE  last_name LIKE "%gen";
----------------------------------------------------------------------------------------------------------------------------------------------------------

2c. Find all actors whose last names contain the letters LI. This time, order the rows by last name and first name, in that order:

2c.Query -  
SELECT   actor_id,
         first_name,
         last_name
FROM     actor
WHERE    last_name LIKE '%LI%'
ORDER BY last_name,
         first_name;
-----------------------------------------------------------------------------------------------------------------------------------------------------------

2d. Using IN, display the country_id and country columns of the following countries: Afghanistan, Bangladesh, and China:

2d.Query - 
SELECT country_id,
       country
FROM   country
WHERE  country IN( 'Afghanistan', 'Bangladesh', 'China' );
----------------------------------------------------------------------------------------------------------------------------------------------------------

3a. Add a middle_name column to the table actor. Position it between first_name and last_name. Hint: you will need to specify the data type.

3a.Query - ALTER TABLE actor
  ADD COLUMN middle_name VARCHAR(200) after first_name; 
----------------------------------------------------------------------------------------------------------------------------------------------------------

3b. You realize that some of these actors have tremendously long last names. Change the data type of the middle_name column to blobs.

3b.Query -  
ALTER TABLE actor
  modify COLUMN middle_name BLOB; 
----------------------------------------------------------------------------------------------------------------------------------------------------------

3c. Now delete the middle_name column.

3c.Query - 
ALTER TABLE actor
  DROP COLUMN middle_name;
----------------------------------------------------------------------------------------------------------------------------------------------------------

4a. List the last names of actors, as well as how many actors have that last name.

4a.Query -  
SELECT last_name,
       Count(last_name)
FROM   actor
GROUP  BY last_name;
------------------------------------------------------------------------------------------------------------------------------------------------------

4b. List last names of actors and the number of actors who have that last name, but only for names that are shared by at least two actors

4b.Query -  
SELECT last_name,
       Count(last_name)
FROM   actor
GROUP  BY last_name
HAVING Count(last_name) >= 2; 
----------------------------------------------------------------------------------------------------------------------------------------------------------

4c. Oh, no! The actor HARPO WILLIAMS was accidentally entered in the actor table as GROUCHO WILLIAMS, the name of Harpo's second cousin's husband's yoga teacher. Write a query to fix the record.

4C.Query -  
UPDATE actor
SET    first_name = 'HARPO'
WHERE  first_name = 'GROUCHO'
       AND last_name = 'WILLIAMS'; 
-----------------------------------------------------------------------------------------------------------------------------------------------------------

4d. Perhaps we were too hasty in changing GROUCHO to HARPO. It turns out that GROUCHO was the correct name after all! In a single query, if the first name of the actor is currently HARPO, change it to GROUCHO. Otherwise, change the first name to MUCHO GROUCHO, as that is exactly what the actor will be with the grievous error. BE CAREFUL NOT TO CHANGE THE FIRST NAME OF EVERY ACTOR TO MUCHO GROUCHO, HOWEVER! (Hint: update the record using a unique identifier.)

4d-Query -  UPDATE actor
SET    first_name = 'GROUCHO'
WHERE  first_name = 'HARPO'
       AND last_name = 'WILLIAMS'; 
----------------------------------------------------------------------------------------------------------------------------------------------------------

5a. You cannot locate the schema of the address table. Which query would you use to re-create it?

5a.Query - describe sakila.address;
----------------------------------------------------------------------------------------------------------------------------------------------------------

6a. Use JOIN to display the first and last names, as well as the address, of each staff member. Use the tables staff and address:
6a.Query - 
SELECT staff.first_name,
       staff.last_name,
       address.address
FROM   staff
       INNER JOIN address
               ON address.address_id = staff.address_id; 
-----------------------------------------------------------------------------------------------------------------------------------------------------------

6b. Use JOIN to display the total amount rung up by each staff member in August of 2005. Use tables staff and payment.

6b.Query - 
SELECT Concat(staff.first_name, ' ', staff.last_name),
       Sum(payment.amount)
FROM   payment
       JOIN staff
         ON payment.staff_id = staff.staff_id
WHERE  payment_date LIKE '2005-08%'
GROUP  BY payment.staff_id; 
----------------------------------------------------------------------------------------------------------------------------------------------------------

6c. List each film and the number of actors who are listed for that film. Use tables film_actor and film. Use inner join.

6c.Query - 
SELECT film.title,
       Count(film_actor.actor_id)
FROM   film
       JOIN film_actor
         ON film.film_id = film_actor.film_id
GROUP  BY film.title;
----------------------------------------------------------------------------------------------------------------------------------------------------------

6d. How many copies of the film Hunchback Impossible exist in the inventory system?

6d.Query -
SELECT film.title,
       Count(inventory.inventory_id)
FROM   film
       JOIN inventory
         ON film.film_id = inventory.film_id
WHERE  film.title = 'Hunchback Impossible'
GROUP  BY film.film_id;
----------------------------------------------------------------------------------------------------------------------------------------------------------
6e. Using the tables payment and customer and the JOIN command, list the total paid by each customer. List the customers alphabetically by last name:

6e.Query - 
SELECT customer.first_name,
       customer.last_name,
       Sum(payment.amount)
FROM   customer
       JOIN payment
         ON customer.customer_id = payment.customer_id
GROUP  BY customer.customer_id; 
-----------------------------------------------------------------------------------------------------------------------------------------------------------
7a. The music of Queen and Kris Kristofferson have seen an unlikely resurgence. As an unintended consequence, films starting with the letters K and Q have also soared in popularity. Use subqueries to display the titles of movies starting with the letters K and Q whose language is English.

7a.Query - 
SELECT film.title
FROM   film
WHERE  film.language_id = (SELECT language_id
                           FROM   language
                           WHERE  name = 'English')
       AND film.title LIKE 'K%'
        OR 'Q%;' 
------------------------------------------------------------------------------------------------------------------------------------------------------------

7b. Use subqueries to display all actors who appear in the film Alone Trip.

7b Query - 
SELECT Concat(actor.first_name, ' ', actor.last_name)
FROM   actor
WHERE  actor.actor_id IN (SELECT actor_id
                          FROM   film_actor
                          WHERE  film_id = (SELECT film_id
                                            FROM   film
                                            WHERE  title = 'Alone Trip'))
---------------------------------------------------------------------------------------------------------------------------------------------------------   

7c. You want to run an email marketing campaign in Canada, for which you will need the names and email addresses of all Canadian customers. Use joins to retrieve this information.

7c.Query - 
SELECT Concat(customer.first_name, ' ', customer.last_name),
       customer.email
FROM   customer
       JOIN address
         ON address.address_id = customer.address_id
       JOIN city
         ON city.city_id = address.city_id
       JOIN country
         ON country.country_id = city.country_id
WHERE  country.country = 'canada';
------------------------------------------------------------------------------------------------------------------------------------------------------

7d. Sales have been lagging among young families, and you wish to target all family movies for a promotion. Identify all movies categorized as famiy films.

7d.Query - 
SELECT film.title
FROM   film
       JOIN film_category
         ON film_category.film_id = film.film_id
       JOIN category
         ON category.category_id = film_category.category_id
WHERE  category.NAME = 'Family'; 
--------------------------------------------------------------------------------------------------------------------------------------------------------

7e. Display the most frequently rented movies in descending order.

7e.Query - 
SELECT film.title,
       Count(rental.rental_date)
FROM   film
       JOIN inventory
         ON inventory.film_id = film.film_id
       JOIN rental
         ON rental.inventory_id = inventory.inventory_id
GROUP  BY film.title
ORDER  BY Count(rental.rental_date) DESC; 
-----------------------------------------------------------------------------------------------------------------------------------------------------------

7f. Write a query to display how much business, in dollars, each store brought in.

7f.Query - 
SELECT staff.store_id,
       Sum(payment.amount)
FROM   payment
       JOIN staff
         ON ( payment.staff_id = staff.staff_id )
GROUP  BY store_id;
----------------------------------------------------------------------------------------------------------------------------------------------------------

7g. Write a query to display for each store its store ID, city, and country.

7g.Query - 
SELECT store.store_id,
       city.city,
       country.country
FROM   store
       JOIN address
         ON address.address_id = store.address_id
       JOIN city
         ON city.city_id = address.city_id
       JOIN country
         ON country.country_id = city.country_id
ORDER  BY store.store_id; 
---------------------------------------------------------------------------------------------------------------------------------------------------------

7h. List the top five genres in gross revenue in descending order. (Hint: you may need to use the following tables: category, film_category, inventory, payment, and rental.)

7h.Query - 
SELECT category.name,
       Sum(payment.amount)
FROM   category
       JOIN film_category
         ON film_category.category_id = category.category_id
       JOIN inventory
         ON inventory.film_id = film_category.film_id
       JOIN rental
         ON rental.inventory_id = inventory.inventory_id
       JOIN payment
         ON payment.rental_id = rental.rental_id
GROUP  BY category.name
ORDER  BY Sum(payment.amount) DESC
LIMIT  5;
----------------------------------------------------------------------------------------------------------------------------------------------------------

8a. In your new role as an executive, you would like to have an easy way of viewing the Top five genres by gross revenue. Use the solution from the problem above to create a view. If you haven't solved 7h, you can substitute another query to create a view.

8a.Query - 
CREATE view top_5_genre_revenue
AS
  SELECT category.name,
         Sum(payment.amount)
  FROM   category
         JOIN film_category
           ON film_category.category_id = category.category_id
         JOIN inventory
           ON inventory.film_id = film_category.film_id
         JOIN rental
           ON rental.inventory_id = inventory.inventory_id
         JOIN payment
           ON payment.rental_id = rental.rental_id
  GROUP  BY category.name
  ORDER  BY Sum(payment.amount)DESC
  LIMIT  5; 
----------------------------------------------------------------------------------------------------------------------------------------------------------- 

8b. How would you display the view that you created in 8a?

8b.Query - 
SELECT *
FROM   top_5_genre_revenue; 
-----------------------------------------------------------------------------------------------------------------------------------------------------------

8c. You find that you no longer need the view top_five_genres. Write a query to delete it.

8c.Query - 
DROP VIEW top_5_genre_revenue;
---------------------------------------------------------------------------------------------------------------------------------------------------------- 