1. db.restaurants.find()

2. 
db.restaurants.aggregate({$project : {name : 1, borough : 1 , cuisine : 1, restaurant_id : 1 }})
=>
[
  {
    _id: ObjectId("63eb599ac092b8919571f407"),
    borough: 'Bronx',
    cuisine: 'Bakery',
    name: 'Morris Park Bake Shop',
    restaurant_id: '30075445'
  }
]

3. db.restaurants.aggregate({$project : {name : 1, borough : 1 , cuisine : 1, restaurant_id : 1 , _id : 0}})
[
  {
    borough: 'Bronx',
    cuisine: 'Bakery',
    name: 'Morris Park Bake Shop',
    restaurant_id: '30075445'
  }
]

4. db.restaurants.aggregate({$project : {name : 1, borough : 1 , "address.zipcode" : 1, restaurant_id : 1 , _id : 0}})
[
  {
    address: { zipcode: '10462' },
    borough: 'Bronx',
    name: 'Morris Park Bake Shop',
    restaurant_id: '30075445'
  }
]

5. db.restaurants.aggregate([{$match : {borough : 'Bronx'}}])

6. db.restaurants.aggregate([{$match : {borough : 'Bronx'}} , {$limit : 5}])

7.  db.restaurants.aggregate([{$match : {borough : 'Bronx'}} ,{$skip : 5} ,{$limit : 5}])



--- based on => db.scores.find(
   { results: { $elemMatch: { $gte: 80, $lt: 85 } } }
)

8.  db.restaurants.find({grades : { $elemMatch:{"score":{$gt : 90}}}})

9.  db.restaurants.find({grades : { $elemMatch:{"score":{$gt : 80 , $lt : 100}}}});

10.  db.restaurants.find({"address.coord.0" : {$lt : -95.754168}})

11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168. 
=> db.restaurants.find(
  {
    cuisine  :  {$nin : ["American"]},
    "address.coord.0" :  {$lt : -65.754168},
    "grades.score" : {$gt : 70},
  }
)

12 . Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
Note : Do this query without using $and operator. 

=> db.restaurants.find(
  {
    "cuisine"  :  {$nin : ["American"]},
    "address.coord.1" :  {$lt : -65.754168},
    "grades.score" : {$gt : 70},
  }
)

13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order. 
=> db.restaurants.find(
  {
    "cuisine"  :  {$nin : ["American"]},
    "borough" :  {$ne:"Brooklyn"},
    grades : { $elemMatch:{"grade": "A"}}
  }
).sort({"cuisine" : -1})

14 . Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name. 
=> db.restaurants.aggregate([
{$project : {restaurant_id : 1 ,name : 1 ,borough : 1 ,cuisine : 1}},
{$match : {name : {$regex : '^Wil'}} }
])

15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name. 
=> db.restaurants.aggregate([
{$project : {restaurant_id : 1 ,name : 1 ,borough : 1 ,cuisine : 1}},
{$match : {name : {$regex : 'ces$'}} }
])

16.  Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.
=> db.restaurants.aggregate([
{$project : {restaurant_id : 1 ,name : 1 ,borough : 1 ,cuisine : 1}},
{$match : {name : {$regex : 'Reg'}} }
])

17. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish. 
=> db.restaurants.find({
  borough : "Bronx",
  cuisine : {$in : ["American" , "Chinese"]}
})

18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn. 
=> db.restaurants.find({
  borough : {$in : ["Staten Island" , "Queens" , "Bronxor Brooklyn"]}
}  , {restaurant_id : 1 , name : 1 , borough : 1, cuisine : 1})

19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn. 
=> db.restaurants.find({
  borough : {$nin : ["Staten Island" , "Queens" , "Bronxor Brooklyn"]}
}  , {restaurant_id : 1 , name : 1 , borough : 1, cuisine : 1})


20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10. 
=>db.restaurants.find({
  grades : {$not : { $elemMatch:{"score":{$gt : 10}}}}
}  , {restaurant_id : 1 , name : 1 , borough : 1, cuisine : 1})


21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'. 
=> db.restaurants.find({
  grades : {$not : { $elemMatch:{"score":{$gt : 10}}}}
}  , {restaurant_id : 1 , name : 1 , borough : 1, cuisine : 1})



22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates.. 

=> db.restaurants.find({
    grades : { $elemMatch:{
      "grade":"A","score":11,"date":ISODate("2014-08-11T00:00:00Z")
    }}, 

} , {restaurant_id : 1 , name : 1 , grades: 1})


23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z". 

=> db.restaurants.find({ 
    "grades.1.grade" : "A" , "grades.1.score" : 9 , "grades.1.date" : ISODate("2014-08-11T00:00:00Z") 
} , {restaurant_id : 1 , name : 1 , grades: 1})

24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52.. 

=> db.restaurants.find({
  "address.coord.1" : {$gt : 42 , $lte : 52} 
} , 
{restaurant_id : 1 , name : 1 , address : 1 , }
)


25. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.

db.restaurants.aggregate({
  $sort : {name : 1}
})
 

26. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns. 
db.restaurants.aggregate({
  $sort : {name : -1}
})



27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order. 

db.restaurants.aggregate({
  $sort : {cuisine : 1 , borough : -1}
})

28. Write a MongoDB query to know whether all the addresses contains the street or not. 

=> db.restaurants.find({
  "address.street":{$exists:false}
  },{"address.street":1}) 

29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double. 

=> db.restaurants.find({
  "address.coord":{$type:"double"}
  },{address:1})

30. Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7. 
=> db.restaurants.find({
  "grades":{$elemMatch:{"score":{$mod: [7,0]}}}
  },{_id:1,name:1,grades:1})


31. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name. 

=>db.restaurants.aggregate([
{$match : {name : {$regex : 'mon'}} },
{$project : {"address.coord" : 1 ,name : 1 ,borough : 1 ,cuisine : 1}}
])


32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.
=> db.restaurants.aggregate([
{$match : {name : {$regex : '^Mad'}} },
{$project : {"address.coord" : 1 ,name : 1 ,borough : 1 ,cuisine : 1}}
])
