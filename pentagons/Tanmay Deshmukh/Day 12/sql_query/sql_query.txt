1a. Display the first and last names of all actors from the table actor. $

	:- select first_name,last_name from sakila.actor $


1b. Display the first and last name of each actor in a single column in upper case letters. Name the column Actor Name. $

	:- select	upper( concat(first_name," ", last_name)) AS ACTOR_NAME from sakila.actor $


2a. You need to find the ID number, first name, and last name of an actor, of whom you know only the first name, "Joe." What is one query would you use to obtain this information? $
	
	:- 	select actor_id ,first_name ,last_name from sakila.actor where first_name = "joe" $


2b. Find all actors whose last name contain the letters GEN:$

	:-  select	*  from sakila.actor where last_name LIKE "%GEN%" $


2c. Find all actors whose last names contain the letters LI. This time, order the rows by last name and first name, in that order: $
	
	:- select	*  from sakila.actor where last_name LIKE "%LI%" order by last_name,first_name $


2d. Using IN, display the country_id and country columns of the following countries: Afghanistan, Bangladesh, and China: $

	:- select	country_id from sakila.country where country in ("Afghanistan","Bangladesh","China") $


3a. Add a middle_name column to the table actor. Position it between first_name and last_name. Hint: you will need to specify the data type. $

	:- ALTER table sakila.actor Add column middle_name varchar(50) AFTER first_name $


3b. You realize that some of these actors have tremendously long last names. Change the data type of the middle_name column to blobs. $
	
	:- ALTER TABLE sakila.actor MODIFY COLUMN middle_name blob; $


3c. Now delete the middle_name column.

	:- ALTER TABLE sakila.actor DROP COLUMN middle_name; $


4a. List the last names of actors, as well as how many actors have that last name. $
	
	:- select last_name,count(last_name) as count from sakila.actor group by last_name $


4b. List last names of actors and the number of actors who have that last name, but only for names that are shared by at least two actors $
	
	:- select last_name from sakila.actor group by last_name having count(last_name) >=2 $


4c. Oh, no! The actor HARPO WILLIAMS was accidentally entered in the actor table as GROUCHO WILLIAMS, the name of Harpo's second cousin's husband's yoga teacher. Write a query to fix the record. $
	
	:- 	UPDATE sakila.actor SET first_name = 'HARPO' WHERE first_name = 'GROUCHO' and last_name = 'WILLIAMS' $


4d. Perhaps we were too hasty in changing GROUCHO to HARPO. It turns out that GROUCHO was the correct name after all! In a single query, if the first name of the actor is currently HARPO, change it to GROUCHO. Otherwise, change the first name to MUCHO GROUCHO, as that is exactly what the actor will be with the grievous error. BE CAREFUL NOT TO CHANGE THE FIRST NAME OF EVERY ACTOR TO MUCHO GROUCHO, HOWEVER! (Hint: update the record using a unique identifier.) $
	
	:-  UPDATE sakila.actor SET first_name  = "GROUCHO" WHERE first_name ="HARPO" and last_name = "WILLIAMS" $



5a. You cannot locate the schema of the address table. Which query would you use to re-create it? $

	:- DESCRIBE sakila.address $

6a. Use JOIN to display the first and last names, as well as the address, of each staff member. Use the tables staff and address: $
	
	:- SELECT staff.first_name,staff.last_name, address.address FROM sakila.staff   INNER JOIN sakila.address  ON staff.staff_id = address.address_id;  $


6b. Use JOIN to display the total amount rung up by each staff member in August of 2005. Use tables staff and payment. $

	:- 	SELECT staff.first_name,staff.last_name, payment.amount FROM sakila.staff   INNER JOIN sakila.payment  ON staff.staff_id = payment.payment_id; $ 


6c. List each film and the number of actors who are listed for that film. Use tables film_actor and film. Use inner join. $
	
	:- SELECT film.title,count(film_actor.actor_id) FROM sakila.film   INNER JOIN sakila.film_actor  ON film.film_id = film_actor.film_id; $

  

6d. How many copies of the film Hunchback Impossible exist in the inventory system? $
	
	:- select film.title, count(inventory.film_id)  from sakila.film  inner	join sakila.inventory on film.film_id = inventory.film_id where film.title = "Hunchback Impossible" $


6e. Using the tables payment and customer and the JOIN command, list the total paid by each customer. List the customers alphabetically by last name: $
	
	:-select customer.first_name , customer.last_name,sum(payment.amount) from sakila.customer join sakila.payment on customer.customer_id = payment.customer_id group by payment.customer_id order by customer.last_name asc $



7a. The music of Queen and Kris Kristofferson have seen an unlikely resurgence. As an unintended consequence, films starting with the letters K and Q have also soared in popularity. Use subqueries to display the titles of movies starting with the letters K and Q whose language is English. $

	:- select film.title, language.name from sakila.film join sakila.language on language.language_id = film.language_id where title like "K%" or title like "Q" and language.name = "English" $


7b. Use subqueries to display all actors who appear in the film Alone Trip.
	
	:-	select actor.first_name ,actor.last_name from sakila.actor where actor_id in (select film_actor.actor_id from sakila.film_actor where film_actor.film_id in (select film.film_id from sakila.film where film.title ="Alone Trip" )) $



7c. You want to run an email marketing campaign in Canada, for which you will need the names and email addresses of all Canadian customers. Use joins to retrieve this information. $

	:- 	select customer.first_name ,customer.last_name,customer.email ,country.country from sakila.customer join address on address.address_id = customer.address_id join city on city.city_id = address.city_id join sakila.country on country.country_id = city.country_id	where country.country ="Canada" $



7d. Sales have been lagging among young families, and you wish to target all family movies for a promotion. Identify all movies categorized as famiy films. $

	:-   select title from film join film_category on film_category.film_id = film.film_id join category on category.category_id = film_category.category_id where category.name = "family" $


7e. Display the most frequently rented movies in descending order. $
	
	:- select title from film join inventory on inventory.film_id = film.film_id join	rental on rental.inventory_id = inventory.inventory_id  order by  rental.rental_date desc $
	


7f. Write a query to display how much business, in dollars, each store brought in. $

	:- select store.store_id, sum(payment.amount) from store join staff on staff.store_id = store.store_id join	payment on payment.staff_id = staff.staff_id group by store.store_id $


7g. Write a query to display for each store its store ID, city, and country. $

	:- select store_id,city.city,country.country from store join address on address.address_id = store.address_id join city on city.city_id = address.city_id join  country on country.country_id = city.country_id $





7h. List the top five genres in gross revenue in descending order. (Hint: you may need to use the following tables: category, film_category, inventory, payment, and rental.) $

	:- select category.name  ,sum(payment.amount) as sum from category JOIN
		film_category on film_category.category_id = category.category_id join 
		inventory on inventory.film_id = film_category.film_id join 
		rental on rental.inventory_id = inventory.inventory_id join 
		payment on payment.rental_id = rental.rental_id
		group by category.name
		order by sum1 desc
		limit 5 $


8a. In your new role as an executive, you would like to have an easy way of viewing the Top five genres by gross revenue. Use the solution from the problem above to create a view. If you haven't solved 7h, you can substitute another query to create a view. $

	:- CREATE OR REPLACE VIEW top_five AS SELECT category.name  , sum(payment.amount) as sum from category JOIN
		film_category on film_category.category_id = category.category_id join 
		inventory on inventory.film_id = film_category.film_id join 
		rental on rental.inventory_id = inventory.inventory_id join 
		payment on payment.rental_id = rental.rental_id
		group by category.name
		order by sum desc
		limit 5 $
		

8b. How would you display the view that you created in 8a? $
	:- select * from top_five $

8c. You find that you no longer need the view top_five_genres. Write a query to delete it. $

	:- drop view top_five $